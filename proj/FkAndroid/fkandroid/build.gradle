import groovy.json.JsonSlurper
import org.apache.velocity.Template
import org.apache.velocity.VelocityContext
import org.apache.velocity.app.VelocityEngine
import org.apache.velocity.runtime.RuntimeConstants

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion target_version

    defaultConfig {
        minSdkVersion min_version
        targetSdkVersion target_version
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "version"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_ARM_NEON=TRUE",
                        "-DANDROID_CPP_FEATURES=rtti exceptions",
                        "-DENABLE_FK=TRUE"
            }
        }
        ndk {
            stl "libstdc++"
            abiFilters "arm64-v8a"
//            abiFilters "armeabi-v7a", "arm64-v8a"
        }
        buildConfigField("boolean", "ENABLE_UNIT_TEST", "false")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }

    productFlavors {
        Normal {
            externalNativeBuild {
                cmake {
                    arguments.add "-DENABLE_G_TEST=FALSE"
                }
            }
        }

        UnitTest {
            buildConfigField("boolean", "ENABLE_UNIT_TEST", "true")
            externalNativeBuild {
                cmake {
//                    cppFlags "-fprofile-arcs -ftest-coverage --coverage -fprofile-instr-generate"
                    arguments.add "-DENABLE_G_TEST=TRUE"
                }
            }
//            sourceSets.main {
//                jni.srcDirs = []
//                jniLibs.srcDir "./src/test/cpp/prebuild/shared/gtest/libs"
//            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
//            version "3.10.2.4988404"
        }
    }
    android.libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "film_kilns_${defaultConfig.versionName}_${defaultConfig.versionCode}" + '.aar'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    implementation "androidx.appcompat:appcompat:$androidx_version"
    implementation "androidx.core:core-ktx:$androidx_version"
    //Kotlin协程
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.27.0-eap13"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.27.0-eap13"
}

task generateCPPSources {
    def rootDir = new File(getRootDir().parentFile.parentFile, "src")
    def templateDir = new File(getProjectDir(), "templates")
    def jsonFile = file('cpp_sources.json')
    def entities = new JsonSlurper().parseText(jsonFile.text)

    VelocityEngine engine = new VelocityEngine()
    engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, templateDir.getAbsolutePath());
    engine.init()

    for (item in entities) {
        for (pkt in item.packages) {
            for (src in pkt.src) {
                def headerFile = new File(rootDir, "${item.module}/include/${src}.h")
                def srcFile = new File(rootDir, "${item.module}/${pkt.package}/${src}.cpp")
                def tagHeader = "${item.module.replace("Fk", "Fk_")}_${src}_H".toUpperCase()
                VelocityContext ctx = new VelocityContext()
                ctx.put("moduleName", item.module)
                ctx.put("className", src)
                ctx.put("tagHeader", tagHeader)
                if (!headerFile.exists()) {
                    writeSource(engine, ctx, "FkHeader.txt", headerFile)
                    println("New   h: ${headerFile.path}")
                }
                if (!srcFile.exists()) {
                    writeSource(engine, ctx, "FkCPP.txt", srcFile)
                    println("New cpp: ${srcFile.path}")
                }
            }
        }
    }
}

static def writeSource(VelocityEngine engine, VelocityContext ctx, String templateStr, File out) {
    Template template = engine.getTemplate(templateStr)
    ctx.put("email", "aliminabc@gmail.com")

    try {
        FileWriter writer = new FileWriter(out)
        template.merge(ctx, writer)
        writer.flush()
        writer.close()
        return true
    } catch (IOException e) {
        e.printStackTrace()
    }
    return false
}